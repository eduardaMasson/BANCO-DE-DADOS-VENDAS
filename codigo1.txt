/* 1 */

UPDATE DEBITOS 
SET SITUACAO_DEBITO = 'Atrasado'
WHERE DATAVENCIMENTO < CURRENT_DATE 
AND SITUACAO_DEBITO NOT IN ('Negociado','Pago')



/* 2 */

UPDATE DEBITOS 
SET SITUACAO_DEBITO = 'Pendente'
WHERE DATAVENCIMENTO > CURRENT_DATE 
AND SITUACAO_DEBITO NOT IN ('Pago')



/* 3 */

UPDATE DEBITOS
SET DATAVENCIMENTO = DATEADD(-5 YEAR TO DATAVENCIMENTO)
WHERE SITUACAO_DEBITO = 'Negociado'



/* 4 */

SELECT p.nome, p.email, p.telefone
FROM pessoa p



/* 5 */

SELECT * FROM PRODUTO p 
WHERE PRECO_UNITARIO > 100



/* 6 */

SELECT * FROM VENDA v 
WHERE DATA_VENDA = '2022-11-14'



/* 7 */

SELECT P.NOME, P.DATA_NASCIMENTO, (CURRENT_DATE - P.DATA_NASCIMENTO)/365
FROM FORNECEDOR f 
LEFT JOIN PESSOA p ON P.ID_PESSOA = F.ID_PESSOA 
WHERE F.ID_FORNECEDOR IN (SELECT id_fornecedor FROM PRODUTO p WHERE quantidade_estoque IS NULL)



/* 8 */

SELECT PESSOA.NOME FROM DEBITOS
INNER JOIN CLIENTE ON CLIENTE.ID_CLIENTE = DEBITOS.ID_CLIENTE
INNER JOIN PESSOA ON PESSOA.ID_PESSOA = CLIENTE.ID_PESSOA
WHERE DEBITOS.SITUACAO_DEBITO = 'Atrasado'



/* 9 - EXERCÍCIO ANULADO*/



/* 10 */

SELECT FIRST 10 CLIENTE.ID_CLIENTE, PESSOA.NOME, EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM PESSOA.DATA_NASCIMENTO) AS IDADE
, COALESCE((SELECT SUM(DEBITOS.VALOR_TOTAL) FROM DEBITOS   --valores padrões
WHERE DEBITOS.ID_CLIENTE = CLIENTE.ID_CLIENTE 
AND DEBITOS.DATAVENCIMENTO < CURRENT_DATE    --DATA ATUAL
AND DEBITOS.SITUACAO_DEBITO IN ('Atrasado', 'Pendente')),0) AS DEBITO_PENDENTE, (SELECT SUM(DEBITOS.VALOR_TOTAL) FROM DEBITOS
WHERE DEBITOS.ID_CLIENTE = CLIENTE.ID_CLIENTE
AND SITUACAO_DEBITO = 'Pago') AS DEBITO_PAGO FROM PESSOA
INNER JOIN CLIENTE ON CLIENTE.ID_PESSOA = PESSOA.ID_PESSOA
ORDER BY 4 DESC   --ordem decrescente


/* 11 */

UPDATE PRODUTO 
SET PRECO_UNITARIO = PRECO_UNITARIO * 1.10        -- total com os 10%
WHERE QUANTIDADE_ESTOQUE < 10



/* 12 - EXERCÍCIO ANULADO*/



/* 13 */

UPDATE DEBITOS d
SET d.situacao_debito = 'Pago'
WHERE d.situacao_debito = 'Atrasado' AND ID_DEBITO IN (SELECT ID_DEBITO FROM PAGAMENTO)



/* 15 */

SELECT *
FROM VENDA v 
WHERE DATA_VENDA BETWEEN '2023-12-01' AND '2024-01-01'


/* 16 */

SELECT *
FROM PRODUTO p 
WHERE QUANTIDADE_ESTOQUE BETWEEN 5 AND 20



/* 17 */

SELECT * FROM PESSOA p 
WHERE NOME LIKE 'A%'



/* 18 */

SELECT * FROM PRODUTO p 
LEFT JOIN ITENSVENDA i ON p.ID_PRODUTO = i.ID_VENDA 
WHERE i.ID_VENDA IS NULL



/* 19 */

SELECT * FROM HISTORICO_COMPRAS_CLIENTE hcc 
WHERE id_cliente IN (SELECT ID_CLIENTE FROM CLIENTE c2
WHERE c2.id_pessoa IN (SELECT ID_CLIENTE FROM PESSOA p2
WHERE p2.nome = 'Carla Souza' OR p2.nome = 'Larissa Ferreira'))



/* 20 */

SELECT *
FROM PESSOA p 
WHERE ID_PESSOA IN (SELECT id_pessoa FROM CLIENTE c)
OR ID_PESSOA IN (SELECT id_pessoa FROM FORNECEDOR f)



/* 21 */

SELECT * FROM VENDA v
LEFT JOIN PESSOA p ON p.ID_PESSOA = v.ID_PESSOA
LEFT JOIN PAGAMENTO p2 ON p2.ID_FORMA_PAGAMENTO = v.ID_FORMA_PAGAMENTO



/* 22 */

SELECT v.*, iv.*, p.* FROM VENDA v
INNER JOIN ITENSVENDA iv ON v.ID_VENDA = iv.ID_VENDA
INNER JOIN PRODUTO p ON iv.ID_PRODUTO = p.ID_PRODUTO
WHERE p.NOME = 'Placa de Captura'



/* 23 */

SELECT p.NOME, (2025 - EXTRACT(YEAR FROM p.data_nascimento)) AS idade_2025       --extrai uma parte específica da data
FROM PESSOA p 
WHERE ID_PESSOA IN (SELECT id_pessoa FROM FORNECEDOR f) OR 
ID_PESSOA IN (SELECT id_pessoa FROM CLIENTE c)



/* 24 */

SELECT l.nome AS logradouro, b.nome AS bairro,
(SELECT COUNT(*) FROM endereco e WHERE e.id_logradouro = l.ID_LOGRADOURO) AS pertence   --conta o número de registros na tabela endereco que correspondem a um logradouro
FROM logradouro l, bairro b
WHERE l.id_bairro = b.ID_BAIRRO 



/* 25 */

SELECT * FROM PRODUTO p 
WHERE PRECO_UNITARIO > (SELECT AVG(PRECO_UNITARIO) FROM PRODUTO p)



/* 26 */
             
SELECT DISTINCT c.* FROM CLIENTE c    --unifica e não traz repetido
LEFT JOIN ENDERECO e ON c.ID_CLIENTE = e.ID_ENDERECO
LEFT JOIN municipio m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO 
WHERE m.POPULACAO > 1000000



/* 27 */

SELECT f.ID_FORNECEDOR, p.NOME AS NOME_FORNECEDOR, 
SUM(IV.QUANTIDADE) AS TOTAL_PRODUTOS_VENDIDOS
FROM FORNECEDOR F
INNER JOIN PRODUTO P ON F.ID_FORNECEDOR = P.ID_FORNECEDOR
INNER JOIN ITENSVENDA IV ON P.ID_PRODUTO = IV.ID_PRODUTO
GROUP BY F.ID_FORNECEDOR, P.NOME



/* 28 */

SELECT p.nome, v.valor_total AS valor
FROM VENDA v
LEFT JOIN PESSOA p ON v.ID_PESSOA = p.ID_PESSOA 
WHERE v.VALOR_TOTAL > 500



/* 29 */

SELECT p.NOME, e.* FROM PESSOA p
INNER JOIN ENDERECO e ON e.ID_PESSOA = p.ID_PESSOA



/* 30 */

SELECT p.nome AS nome_produto, p.PRECO_UNITARIO, p2.nome AS nome_fornecedor
FROM PRODUTO p
LEFT JOIN FORNECEDOR f ON p.id_fornecedor = f.ID_FORNECEDOR 
LEFT JOIN PESSOA p2 ON f.ID_PESSOA = p2.ID_PESSOA 
ORDER BY p.nome       --organiza os resultados pelo ID da pessoa



/* 31 */

SELECT * FROM PRODUTO p 
ORDER BY QUANTIDADE_ESTOQUE DESC



/* 32 */

SELECT * FROM VENDA v 
ORDER BY VALOR_TOTAL ASC



/* 33 */

SELECT id_produto, p.nome, p.quantidade_estoque
FROM PRODUTO p 
WHERE quantidade_estoque < (SELECT AVG(quantidade_estoque) FROM PRODUTO p2)



/* 34 */

SELECT DISTINCT p1.* FROM PESSOA p1
INNER JOIN PESSOA p2 ON p1.telefone = p2.telefone
WHERE p1.id_pessoa <> p2.ID_PESSOA   --pessoas diferentes com telefones iguais
ORDER BY TELEFONE ASC --ordem crescente



/* 35 */

UPDATE PRODUTO p SET p.PRECO_UNITARIO = p.PRECO_UNITARIO + p.PRECO_UNITARIO * 0.10  --10%
WHERE p.ID_FORNECEDOR IN (SELECT f.id_fornecedor FROM FORNECEDOR f
INNER JOIN PESSOA pe ON f.id_pessoa = pe.id_pessoa
INNER JOIN ENDERECO e ON pe.id_pessoa = e.id_pessoa
INNER JOIN MUNICIPIO m ON e.id_municipio = m.id_municipio
WHERE m.uf = 'SP')



/* 36 */

SELECT v.* FROM VENDA v
INNER JOIN DEBITOS d ON v.ID_VENDA = d.id_venda
WHERE d.SITUACAO_DEBITO = 'Negociado'
